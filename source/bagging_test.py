# -*- coding: utf-8 -*-
"""
Created on Thu Aug  1 10:02:45 2019

@author: antoc
"""

# dataframe management
import pandas as pd
import math
import numpy as np
import random
from operator import add
import sklearn
import sys
import time
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
from sklearn import preprocessing
from functools import reduce # Valid in Python 2.6+, required in Python 3
import operator
from pyomo.environ import *
from pyomo.opt import SolverFactory
from source.util import *
from source.maths1 import *
from source.sorct import *
from sklearn.model_selection import KFold
from source.bagging import *

extended = False

# In order to deal with scalability you can use command line as follow:
# argv[1]: name of the csv file i.e. IrisCategorical,Seeds,etc...
# argv[2]: eventually any digit to deal with extended version of polynomial of order 2

csv_name = sys.argv[1]
csv_name +='.csv'
ccc = sys.argv[1]+'bag'+'.csv'

reg = sys.argv[2]
reg_term = sys.argv[3]

if len(sys.argv) == 4:
   try:

       print("Experiments on csv '%s' will start soon."%(csv_name))
       
   except IOError:
       print(sys.stderr, 'Error opening %s\n' %sys.argv[1])
       sys.exit(1)
elif len(sys.argv) > 4:
    try:
        extended = True
        print("Polynomial of degree 2 extension will be used.")
    except IOError:
       print(sys.stderr, 'Error opening %s\n' %sys.argv[1])
       sys.exit(1)
else:
   f = sys.stdin
   
if csv_name == 'IrisCategorical.csv' or csv_name == 'wine_dataset.csv':
    data = pd.read_csv(csv_name)
else:
    data = pd.read_csv(csv_name, sep = ';')

data_st = data.copy()
data_st = data_st.replace('?', float('nan'))
data_st = data_st.dropna()

if csv_name == 'car.csv':
    df = pd.get_dummies(data_st.iloc[:,:-1])
    data_st = pd.concat([df, data_st.iloc[:,-1]], axis=1, join_axes=[df.index])    

if csv_name == 'IrisCategorical.csv' or csv_name == 'wisconsin.csv':
    data = data.drop('Id', axis=1)
    data_st = data_st.drop('Id', axis=1)



# Rename the column with the label with generic name 'Classes'
data.rename(columns={'Species':'Classes'}, inplace=True)
data_st.rename(columns={'Species':'Classes'},inplace=True)

#The name of the classes K
classes = data_st['Classes'].unique().tolist()
classes_en = [i for i in range(len(classes))] 
if csv_name !='car.csv':
    
    # Setting of the Scaling (to interval (0,1)) phase
    scaler = MinMaxScaler()

    #Preprocessing: we get the columns names of features which have to be standardized
    columns_names = list(data_st)
    index_features = list(range(0,len(data_st.columns)-1))

    
    #Scaling phase
    data_st[columns_names[0:len(index_features)]] = scaler.fit_transform(data_st[columns_names[0:len(index_features)]])

#Encoder processing
le = preprocessing.LabelEncoder()
le.fit(data_st['Classes'])

data_st['Classes'] = le.transform(data_st['Classes']) 



data_std = data_st.sample(frac= 1 ,random_state = 23).reset_index(drop=True)


data_std = data_std.replace(1.0000000000000002, 1)
data_std = data_std.replace(1.0000000000000004, 1)
data_std = data_std.replace(1.0000000000000009, 1)

init = {'init_data': [2937,
  9756,
  9629,
  1229,
  6933,
  4487,
  246,
  8932,
  2069,
  6315,
  3133,
  300,
  4795,
  1498,
  9771,
  6711,
  2766,
  904,
  1453,
  5932,
  2646,
  5126,
  476,
  6391,
  1384,
  9216,
  3334,
  2970,
  7180,
  6503,
  4076,
  3075,
  3628,
  2346,
  8058,
  2328,
  6799,
  2446,
  1613,
  467,
  4482,
  3237,
  7351,
  4243,
  1676,
  2417,
  7877,
  4898,
  6316,
  3154,
  705,
  6899,
  2884,
  2876,
  2468,
  6190,
  937,
  19,
  4505,
  1855,
  2267,
  7073,
  8639,
  5176,
  369,
  9176,
  8726,
  1859,
  9268,
  5325,
  5867,
  105,
  2603,
  4788,
  2025,
  7346,
  6931,
  3255,
  1656,
  2037,
  8776,
  6658,
  9639,
  1206,
  8792,
  7573,
  3431,
  4361,
  449,
  1850,
  3952,
  4785,
  106,
  872,
  990,
  8877,
  1515,
  2002,
  9080,
  9142,
  5202,
  5080,
  7798,
  3718,
  2936,
  9476,
  1145,
  2294,
  8681,
  8130,
  99,
  6819,
  4366,
  1966,
  9556,
  848,
  2933,
  1534,
  7060,
  9150,
  2980,
  2611,
  9572,
  1935,
  5591,
  8064,
  4663,
  145,
  3747,
  9003,
  5080,
  9851,
  744,
  1741,
  9426,
  6582,
  1202,
  4566,
  2468,
  2989,
  2148,
  2776,
  9976,
  3057,
  4824,
  7249,
  1017,
  9467,
  9935,
  5425,
  738,
  7666,
  2882,
  8725,
  4075,
  2877,
  9959,
  4074,
  2272,
  6564,
  162,
  4100,
  5172,
  74,
  6946,
  2599,
  7987,
  6975,
  2521,
  7283,
  2170,
  483,
  4628,
  8405,
  14,
  1620,
  7249,
  9988,
  1736,
  3862,
  3191,
  5820,
  4815,
  4665,
  3610,
  3378,
  1241,
  6142,
  5907,
  2216,
  3305,
  5888,
  7158,
  5274,
  189,
  2217,
  5287,
  8336,
  9832,
  4767],
 'init_var': [[8319, 2246, 8037, 2814, 4557, 9943, 6442, 1762, 9662],
  [6175, 3695, 793, 2889, 4627, 1935, 6571, 8245, 54],
  [2582, 8487, 8141, 9132, 3138, 4551, 5041, 7755, 4871],
  [6255, 8196, 6661, 7710, 5224, 6776, 9692, 2998, 6800],
  [1873, 119, 9883, 9164, 788, 5538, 9329, 3180, 7117],
  [5833, 4362, 3353, 1163, 8022, 3469, 3213, 8217, 4473],
  [6220, 493, 3325, 5780, 7324, 9106, 840, 2353, 3011],
  [9436, 7976, 9899, 9474, 9374, 5569, 3355, 2127, 6719],
  [1809, 537, 7302, 6244, 768, 773, 6874, 8941, 444],
  [7713, 6965, 3404, 8417, 2421, 6303, 8070, 5220, 2999],
  [5139, 9285, 163, 274, 1023, 7263, 2111, 8484, 648],
  [4911, 1369, 2741, 6918, 4216, 7409, 7635, 76, 7444],
  [7719, 3198, 9302, 7018, 6745, 531, 6087, 4459, 3097],
  [6081, 8295, 4419, 3059, 9315, 2594, 3063, 2161, 7008],
  [3437, 6362, 7008, 9114, 6877, 5172, 3547, 6349, 458],
  [7490, 3207, 4796, 8767, 3547, 7791, 1464, 1316, 5299],
  [2268, 8350, 4897, 8890, 2073, 9720, 1359, 377, 3551],
  [2723, 7953, 7392, 4524, 809, 9141, 8884, 8123, 2233],
  [3804, 1974, 5654, 5452, 8482, 3091, 8978, 452, 8145],
  [8858, 5121, 1827, 873, 3786, 6067, 6011, 1774, 2057],
  [2573, 3742, 6137, 9512, 6951, 5064, 2362, 2788, 6561],
  [8859, 4652, 5820, 7496, 5594, 8436, 7514, 8286, 7669],
  [3445, 5724, 9357, 4114, 2665, 5717, 927, 5767, 112],
  [9229, 2664, 7814, 1481, 1920, 565, 7715, 2662, 4530],
  [2333, 7751, 7544, 5678, 2266, 4067, 1421, 1114, 1193],
  [8457, 9223, 5261, 9237, 8944, 6820, 9122, 8442, 2622],
  [9244, 1726, 3690, 120, 8301, 7307, 3235, 5602, 8821],
  [3330, 2806, 3359, 7347, 9602, 5247, 6529, 1374, 7405],
  [1281, 7112, 1641, 303, 9262, 2560, 2168, 3947, 1410],
  [1192, 1645, 3223, 6399, 4443, 9440, 5789, 1626, 6543],
  [2643, 4042, 99, 4956, 2492, 5317, 2619, 1548, 2425],
  [9970, 4949, 9342, 6956, 2519, 4280, 32, 6788, 8661],
  [4994, 3576, 545, 9207, 2519, 2401, 7438, 2878, 4676],
  [8734, 9531, 5456, 3420, 2303, 6794, 8267, 6050, 1450],
  [7909, 1201, 2993, 6985, 9273, 6095, 8854, 9633, 1873],
  [7544, 174, 2649, 1956, 217, 9856, 4410, 8910, 9832],
  [6747, 7667, 5867, 8918, 3761, 2497, 3676, 3384, 8563],
  [2259, 3313, 4744, 4310, 5864, 5046, 1019, 3747, 8305],
  [4398, 6914, 8410, 3338, 5320, 6083, 9846, 5640, 1515],
  [4457, 2579, 7867, 9066, 8846, 1605, 5972, 8596, 5808],
  [5781, 5894, 1655, 5645, 4738, 31, 6366, 6705, 4174],
  [1258, 2310, 2588, 214, 1250, 5579, 7820, 1045, 9072],
  [3179, 8001, 6524, 5636, 4380, 7285, 969, 4295, 755],
  [949, 1568, 2968, 6282, 7165, 654, 670, 1421, 1146],
  [1603, 5496, 8443, 1761, 9935, 441, 8623, 1072, 5223],
  [6695, 7209, 5877, 4970, 1492, 3054, 8706, 7112, 4967],
  [2989, 8413, 8181, 5859, 4994, 197, 4602, 3145, 9221],
  [7105, 9506, 4745, 1733, 420, 3466, 3385, 2573, 6742],
  [889, 801, 7358, 3780, 6008, 1081, 6293, 6316, 910],
  [2873, 4543, 4748, 6689, 6125, 4048, 3414, 1702, 8559],
  [5215, 179, 9664, 5418, 2583, 2004, 8661, 2335, 249],
  [1699, 2610, 2982, 1158, 5301, 3148, 9192, 5807, 3335],
  [9748, 2887, 2703, 9228, 7849, 5101, 3163, 7520, 5236],
  [6816, 3351, 6984, 2043, 6724, 7221, 3809, 6140, 7075],
  [6398, 5071, 8233, 4476, 7779, 4655, 9246, 2098, 230],
  [7056, 4380, 2067, 5504, 8538, 2959, 8726, 4171, 733],
  [2251, 1527, 5674, 7072, 530, 9168, 2096, 5104, 2669],
  [1078, 1342, 361, 715, 6194, 6662, 1743, 2391, 7668],
  [950, 8346, 7001, 3699, 3841, 7541, 8405, 3795, 8032],
  [6811, 5223, 953, 6193, 7294, 7312, 7260, 5471, 6748],
  [2582, 5309, 7313, 8278, 7891, 184, 4931, 8980, 7999],
  [9224, 2926, 3793, 8467, 2929, 6176, 7722, 5980, 5809],
  [7653, 5512, 9305, 8889, 4035, 2063, 6856, 1681, 8713],
  [7076, 8290, 8644, 3775, 5807, 6784, 6369, 6442, 3345],
  [9007, 8932, 4879, 4854, 5196, 8064, 8607, 9663, 4251],
  [189, 2295, 4696, 8088, 474, 2914, 9753, 6995, 9207],
  [1797, 6248, 8786, 8130, 6180, 7323, 3195, 7898, 2330],
  [1054, 5243, 4483, 4033, 969, 1053, 4718, 4603, 8224],
  [5483, 473, 3475, 2012, 3857, 9049, 122, 5149, 618],
  [9717, 9704, 104, 2050, 3744, 3622, 9647, 1018, 4782],
  [7098, 3796, 1130, 9296, 9953, 9406, 6189, 5209, 6476],
  [6099, 1924, 5396, 9873, 6043, 1824, 5609, 187, 7752],
  [4526, 5538, 5878, 6341, 8246, 3248, 3934, 1076, 7032],
  [9612, 4459, 3662, 556, 9212, 6146, 1766, 4366, 5445],
  [759, 9060, 5663, 7259, 7884, 6084, 5846, 4333, 9011],
  [396, 4195, 9165, 7021, 3071, 311, 8417, 7659, 4273],
  [5529, 4650, 1640, 2059, 6165, 2268, 3615, 6491, 81],
  [8280, 589, 96, 1545, 5811, 3372, 5423, 4359, 4798],
  [1921, 1158, 9883, 1037, 2963, 4545, 4997, 495, 9231],
  [3399, 3017, 6542, 112, 1592, 2860, 7562, 9882, 4564],
  [1713, 8617, 8668, 7956, 777, 7172, 6938, 4287, 9236],
  [459, 3289, 6328, 1858, 3126, 3862, 4810, 4215, 8244],
  [5703, 3471, 2047, 9669, 1993, 8160, 4817, 7139, 498],
  [1634, 2839, 1738, 5103, 1031, 5061, 7031, 3798, 3427],
  [9596, 829, 2886, 8535, 1723, 9065, 2274, 8371, 9078],
  [9146, 6143, 3703, 5962, 2113, 9259, 377, 5546, 1398],
  [7835, 9993, 350, 2004, 4475, 902, 9636, 3156, 2372],
  [147, 7487, 2091, 2966, 9627, 5690, 7228, 2707, 6368],
  [2000, 8806, 1001, 2854, 3344, 6032, 6374, 6087, 2589],
  [9056, 8004, 5848, 721, 9662, 8565, 2284, 5959, 8102],
  [930, 4442, 2840, 9411, 2528, 2366, 4352, 4441, 6985],
  [5935, 9629, 82, 3198, 7157, 231, 4749, 311, 8198],
  [4178, 1563, 8557, 7757, 1042, 4731, 9388, 8460, 3422],
  [9595, 9495, 7033, 9259, 9709, 2062, 5734, 5788, 6080],
  [9421, 6585, 1727, 731, 5312, 1755, 6627, 5139, 4218],
  [1267, 2700, 995, 9430, 967, 5156, 4484, 359, 3923],
  [9267, 9189, 507, 2035, 7945, 9066, 7601, 2652, 7707],
  [6531, 3699, 7251, 3929, 901, 5858, 7558, 8543, 3200],
  [3637, 2501, 6481, 8808, 8458, 2759, 2264, 3257, 9726],
  [6399, 103, 8630, 4356, 7484, 6549, 9384, 5483, 3567],
  [5928, 2445, 6421, 9177, 9970, 5920, 9553, 8497, 88],
  [807, 6171, 5349, 2086, 3401, 3404, 8010, 7689, 8426],
  [8525, 9805, 4587, 1522, 8862, 1316, 2272, 1795, 569],
  [9689, 7807, 3246, 589, 8448, 6298, 6341, 4136, 9740],
  [9811, 7774, 2450, 9862, 8064, 5702, 5844, 4337, 1764],
  [4439, 6186, 5878, 2591, 8174, 2392, 1911, 2879, 6596],
  [3350, 304, 6102, 7706, 8736, 5387, 2822, 2119, 3778],
  [2890, 5655, 7079, 9273, 8218, 1400, 1983, 9904, 7779],
  [3501, 2768, 1105, 350, 2720, 1137, 1080, 2890, 3174],
  [6, 7354, 8961, 6213, 5299, 1550, 2061, 7531, 7304],
  [6109, 7417, 4136, 8507, 6352, 6286, 1754, 2764, 4978],
  [2758, 7718, 7997, 8027, 4844, 7173, 5582, 7282, 8416],
  [1152, 6929, 2980, 4373, 1012, 1331, 1317, 8214, 844],
  [8602, 2674, 3372, 2804, 6705, 1516, 9231, 5464, 9410],
  [6159, 3513, 391, 8848, 8272, 3486, 8877, 4280, 3475],
  [3170, 2219, 5230, 9898, 8521, 8146, 6109, 7758, 2810],
  [82, 4770, 9807, 7842, 2544, 3068, 1144, 961, 9756],
  [2751, 2947, 4389, 2057, 7771, 2873, 8222, 1816, 262],
  [2720, 8895, 1394, 2591, 7731, 2688, 9987, 5053, 5032],
  [6546, 4484, 1978, 2087, 1350, 8283, 5186, 2575, 4266],
  [2988, 5551, 786, 9677, 8114, 1655, 4052, 3175, 2843],
  [8116, 702, 4285, 359, 8958, 4297, 7331, 9039, 2395],
  [7693, 4560, 3533, 3866, 7475, 9700, 3093, 3635, 8860],
  [1274, 5329, 1043, 1714, 1439, 746, 3929, 2482, 6992],
  [3841, 8727, 5522, 3021, 3651, 5742, 4715, 6115, 6625],
  [1556, 8714, 8309, 1422, 8142, 1022, 5555, 6382, 4865],
  [9417, 1102, 6421, 5732, 5380, 3500, 9880, 722, 6487],
  [6984, 8465, 1051, 2686, 2055, 1195, 3882, 6886, 6786],
  [6724, 8049, 5289, 827, 421, 5218, 6374, 8199, 5298],
  [2129, 5394, 7572, 768, 7034, 4883, 204, 4506, 582],
  [2660, 2799, 8414, 5859, 3563, 425, 490, 4999, 2769],
  [4339, 4406, 814, 9710, 1297, 8086, 8688, 8949, 4177],
  [3676, 7735, 1995, 4683, 6536, 2757, 4556, 7436, 4778],
  [4111, 8233, 4398, 1524, 2981, 6342, 8567, 113, 295],
  [298, 4911, 9809, 2582, 7365, 6654, 5809, 7078, 8275],
  [6991, 32, 9402, 7041, 2876, 9043, 1980, 2444, 5096],
  [8050, 5276, 1606, 2110, 6699, 430, 7553, 9984, 2623],
  [2185, 4759, 2688, 8740, 931, 9406, 521, 202, 7282],
  [2029, 3154, 605, 5563, 5049, 9887, 9247, 6796, 8318],
  [5883, 3717, 960, 2240, 8995, 441, 6728, 8348, 265],
  [5985, 784, 7814, 5243, 3429, 9575, 5142, 3459, 7802],
  [832, 5051, 7054, 3851, 3131, 744, 1860, 4830, 3270],
  [8094, 6059, 6288, 1583, 4749, 6370, 4623, 9789, 7891],
  [6037, 6853, 3220, 3278, 2511, 4061, 1725, 1762, 6257],
  [3271, 3326, 478, 4595, 7163, 5637, 1914, 5455, 5005],
  [1502, 4691, 1672, 8206, 4655, 2131, 7516, 548, 5195],
  [8970, 9413, 7579, 6360, 8196, 3980, 9877, 1938, 806],
  [2559, 158, 6818, 5083, 4538, 4454, 6919, 2369, 7861],
  [6903, 1834, 2236, 6974, 5681, 4194, 2098, 6140, 1982],
  [5873, 9968, 9578, 2900, 6071, 1468, 674, 2973, 2303],
  [6374, 8810, 5313, 5358, 5820, 2398, 2801, 6647, 7614],
  [6990, 8199, 7392, 5108, 7058, 6893, 2888, 7497, 2819],
  [8446, 9204, 144, 2520, 6835, 9066, 2393, 3726, 2655],
  [8928, 985, 5156, 3145, 8840, 3658, 7185, 4140, 396],
  [4531, 4726, 9352, 1865, 6686, 3447, 5614, 7331, 6978],
  [1046, 7941, 1800, 1701, 5642, 617, 4899, 5930, 2167],
  [9822, 9335, 1144, 8761, 1031, 405, 2232, 4300, 7730],
  [3019, 5186, 5064, 4303, 8352, 2698, 1146, 5996, 5348],
  [711, 5518, 128, 1261, 5426, 9208, 9154, 9404, 4672],
  [1684, 7058, 8609, 6169, 1867, 1692, 8477, 3250, 6006],
  [4625, 3287, 9753, 1167, 1071, 685, 9930, 3611, 3652],
  [2590, 5374, 18, 7238, 9868, 7367, 3629, 7555, 9871],
  [6081, 7898, 3983, 6551, 7357, 1860, 9409, 9654, 1141],
  [7720, 8655, 8990, 433, 1934, 926, 4619, 840, 1672],
  [4055, 3531, 9671, 5340, 6981, 2831, 4081, 2219, 5000],
  [582, 9370, 3284, 9183, 7994, 4514, 1912, 2672, 6431],
  [4678, 6289, 6857, 1690, 5933, 5166, 9831, 9756, 8795],
  [2529, 2630, 5192, 5793, 4035, 5052, 1221, 4161, 5590],
  [2193, 9352, 4857, 3261, 1072, 3678, 7399, 7443, 4590],
  [4057, 7749, 3976, 7604, 2352, 4165, 8547, 7556, 9255],
  [2940, 7868, 44, 9776, 4561, 2198, 2528, 2946, 673],
  [4221, 2394, 7468, 6417, 5686, 3017, 8380, 5741, 4850],
  [7766, 9904, 3557, 7523, 3774, 1323, 5528, 8324, 3756],
  [7169, 7715, 4662, 3005, 5596, 3469, 2947, 4135, 3395],
  [615, 1022, 5042, 3530, 5980, 1058, 3863, 3136, 9048],
  [699, 4190, 7726, 8710, 9325, 9583, 3516, 750, 246],
  [316, 5901, 9421, 9837, 5392, 8446, 4370, 618, 1227],
  [8193, 2473, 3371, 1851, 8561, 2846, 86, 6616, 2930],
  [4430, 3207, 4228, 3196, 6648, 1242, 1089, 4947, 1674],
  [3697, 9514, 6966, 2335, 4962, 3269, 7027, 9121, 8892],
  [6183, 8895, 6779, 8420, 1212, 7188, 6281, 3577, 6660],
  [4679, 9140, 6273, 572, 8965, 1923, 509, 4294, 1374],
  [6838, 6743, 1879, 4342, 3052, 4745, 697, 9781, 2835],
  [1175, 4061, 7702, 8525, 6667, 5875, 4342, 2527, 5803],
  [5294, 9505, 466, 2526, 3832, 2027, 9810, 7700, 1441],
  [6748, 1050, 6372, 9139, 8317, 914, 4460, 4644, 1308],
  [843, 8330, 5769, 8521, 2045, 3600, 6721, 5771, 5923],
  [3697, 3935, 1452, 122, 501, 5395, 520, 7571, 5638],
  [433, 2043, 1864, 6075, 5384, 3723, 4819, 2721, 8236],
  [6627, 513, 1248, 3655, 3182, 8828, 3382, 3368, 8529],
  [4654, 3856, 8951, 1302, 101, 5923, 4332, 5942, 4467],
  [4631, 8889, 1802, 9315, 1771, 8364, 4344, 8919, 9394],
  [2627, 1832, 1855, 5050, 5866, 1159, 4091, 1967, 6298],
  [979, 1199, 7240, 6741, 2032, 6926, 8918, 7427, 6194],
  [7324, 2833, 5971, 6703, 5912, 8700, 4963, 2499, 1427],
  [2501, 7949, 8737, 7496, 2925, 5654, 1414, 7265, 7019],
  [1028, 1798, 1140, 8853, 7212, 7533, 421, 8761, 5112],
  [3395, 4790, 9051, 8404, 610, 2741, 1673, 233, 4451],
  [1612, 3263, 490, 4814, 1697, 9052, 3016, 1100, 812],
  [7612, 1826, 2524, 2759, 2797, 7014, 2928, 7670, 3312]]}
 
acc = {25:[],50:[],100:[]}
ti = {25:[],50:[],100:[]}
tim = {25:[],50:[],100:[]}
itera = [25,50,100]
step = [25,25,50]

k_fold = KFold(n_splits=5)
lambdas = 1/(3*(len(data_std.columns)-1))
l = 1/(len(data_std.columns)-1)

for train_indices, test_indices in k_fold.split(data_std):
    
    df_train = data_std.iloc[train_indices]
    X_test = data_std.iloc[test_indices,0:data_std.shape[1]-1]
    y_test = data_std.iloc[test_indices,data_std.shape[1]-1:data_std.shape[1]]
    
    
    bag = Bagging_SORCT(df_train, N = 100, init=init ,type_reg= reg, reg_term = float(reg_term))
    
    for j in range(3):
        
        beg = time.time()
        bag.update(step[j])
        end = time.time()
        
        ti[itera[j]].append(end-beg)
        bag.predict(X_test)
        acc[itera[j]].append(bag.accuracy(y_test.values))
        
tim[25] = ti[25]       
tim[50] = list(map(add,tim[50],ti[25]))
tim[100]= list(map(add,tim[100],ti[50]))

    

print("Results Bagging")
for i in acc:
    print("Number of trees:%d"%i)
    print("Values:")
    print(acc[i])
    print("Mean:")
    print(np.mean(acc[i]))
    
    print("Tempi")
    print(np.mean(tim[i]))


